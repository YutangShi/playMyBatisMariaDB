<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="services.WebService">

	<!-- 註冊會員 -->
	<insert id="signupNewMember" parameterType="pojo.web.signup.request.SignupRequest">
		insert into
		member_main (memberNo ,email , password , username , createDate, modifyDate)
		values
		( 
			null , 
			#{signupRequest.email} ,
			#{signupRequest.password},
			#{signupRequest.username} ,
			DATE_FORMAT(NOW() , '%Y%m%d%H%i%s') ,
			DATE_FORMAT(NOW(),'%Y%m%d%H%i%s')
		)
	</insert>


	<!-- 檢查是否有重覆註冊的會員 -->
	<select id="checkMemberByEmail" parameterType="String"
		resultType="boolean">
		SELECT count(1) FROM member_main WHERE email=#{email}
	</select>
	
	
	<!-- 檢查是否有重覆的使用者名稱 -->
	<select id="checkMemberByUsername" parameterType="String"
		resultType="boolean">
		SELECT count(1) FROM member_main WHERE username=#{username}
	</select>
	

	<!-- 根據email查詢會員資料 -->
	<select id="findMemberByEmail" parameterType="String"
		resultType="pojo.web.Member">
		SELECT * FROM member_main WHERE email = #{email}
	</select>
	
	
	<!-- 根據memberNo查詢會員資料 -->
	<select id="findMemberByMemberNo" parameterType="String"
		resultType="pojo.web.Member">
		SELECT * FROM member_main WHERE memberNo = #{memberNo}
	</select>


	<!-- 根據 email與username查尋會員資料 -->
	<select id="findMemberByEmailAndUserName" parameterType="String"
		resultType="pojo.web.Member">
		SELECT * FROM member_main WHERE email = #{email} AND username =#{username}
	</select>

	<!-- 產生Token資料 -->
	<insert id="genTokenData" parameterType="Map">
		insert into
		member_token (tokenString , memberNo , type , sendDate , isUse , createDate , modifyDate , expiryDate)
		values
		( 
			#{memberToken.tokenString} , 
			#{memberToken.memberNo} ,
			#{memberToken.type} ,
			DATE_FORMAT(NOW() , '%Y%m%d%H%i%s'),
			0,
			DATE_FORMAT(NOW() , '%Y%m%d%H%i%s') ,
			DATE_FORMAT(NOW(),'%Y%m%d%H%i%s') ,
			DATE_FORMAT(DATE_ADD(NOW(),INTERVAL 1 DAY),'%Y%m%d%H%i%s')
		)
	</insert>
	
	
	<!-- 會員記錄檔 -->
	<insert id="genMemberLoginLog" parameterType="Map">
		insert into
		member_login_log (memberNo , status , ipAddress , device , loginDate)
		values
		( 
			#{memberLoginData.memberNo} , 
			#{memberLoginData.status} ,
			#{memberLoginData.ipAddress} ,
			#{memberLoginData.device} ,
			DATE_FORMAT(NOW(),'%Y%m%d%H%i%s')
		);
	</insert>
	
	
	<!-- 撈出會員認證資訊 -->
	<select id="getMemberTokenData" parameterType="String" resultType="pojo.web.MemberToken">
		SELECT *,DATE_FORMAT(NOW(),'%Y%m%d%H%i%s') as dbTime FROM member_token WHERE tokenString=#{token} AND type=#{type}
	</select>
	
	
	<!--  更新會員認證-->
	<update id="updateMemberToken">
		UPDATE member_token SET isUse = 1 , modifyDate = DATE_FORMAT(NOW(),'%Y%m%d%H%i%s')
		WHERE memberNo = #{memberNo} AND isUse = 0 AND type = #{type}
	</update>
	
	
	<!--  更新會員資料 -->
	<update id="updateMemberToAuthOk">
		UPDATE member_main SET status = '2' , modifyDate = DATE_FORMAT(NOW(),'%Y%m%d%H%i%s')
		WHERE memberNo = #{memberNo}
	</update>
	
	
	<!-- 會員記錄檔 -->
	<insert id="genMemberChangeLog" parameterType="pojo.web.Member">
		insert into
		member_main_log(memberNo , email , password , username , createDate)
		values
		( 
			#{member.memberNo} , 
			#{member.email} ,
			#{member.password},
			#{member.username} ,
			DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		)
	</insert>
	
	
	<!-- 會員Session紀錄檔 -->
	<insert id="genUserSession" parameterType="pojo.web.auth.UserSession">
		insert into
		user_session(sessionId , sessionSign , aseKey , aseIv , no , role , expiryDate , createDate , modifyDate)
		values
		( 
			#{userSession.sessionId} , 
			#{userSession.sessionSign} ,
			#{userSession.aseKey} ,
			#{userSession.aseIv} ,
			#{userSession.no} ,
			#{userSession.role} ,
			#{userSession.expiryDate} ,
			#{userSession.createDate} ,
			#{userSession.modifyDate} 
		) ON DUPLICATE KEY UPDATE 
		sessionId 	= #{userSession.sessionId},
		sessionSign = #{userSession.sessionSign},
		aseKey 		= #{userSession.aseKey},
		aseIv 		= #{userSession.aseIv},
		expiryDate 	= #{userSession.expiryDate},
		modifyDate 	= #{userSession.modifyDate}
	</insert>
	
	
 	<!-- 撈出會員Session資料 -->
	<select id="getUserSession" parameterType="String" resultType="pojo.web.auth.UserSession">
		SELECT * FROM user_session WHERE sessionId = #{sessionId}
	</select>
	

	<!--  更新會員密碼 -->
	<update id="updateMemberPassword">
		UPDATE member_main SET password = #{password} , modifyDate = DATE_FORMAT(NOW(), '%Y%m%d%H%i%s') WHERE memberNo = #{memberNo}
	</update>
	
	
 	<!-- 使用會員編號與密碼確認該會員存在 -->
	<select id="checkMemberByMemberNoAndPassword" parameterType="String" resultType="boolean">
		SELECT COUNT(1) FROM member_main WHERE memberNo = #{no} AND password = #{password}
	</select>
	
	
 	<!-- 更換信箱，撈取使用者信箱，尚未修改信箱，若有尚未修改信箱，且未逾期未使用，一樣顯示給使用者知道 -->
	<select id="getMemberEmails" parameterType="String" resultType="pojo.web.email.MemberChangeEmail">
		SELECT
			(SELECT email FROM member_main WHERE memberNo = #{memberNo} ) AS originalEmail ,
			(SELECT newEmail FROM member_changeEmail 
	 		 WHERE memberNo = #{memberNo} AND expiryDate > (DATE_FORMAT(NOW() , '%Y%m%d%H%i%s')) AND isUse = 0) AS unAuthEmail
		FROM DUAL
	</select>


	<!-- 會員更換電子信箱表單 -->
	<insert id="genMemberSendChangeEmail" parameterType="pojo.web.email.MemberSendChangeEmail">
		insert into
		member_changeEmail(memberNo , oldEmail , newEmail , token , checkCode , isUse , createDate , expiryDate)
		values
		( 
			#{data.memberNo} , 
			#{data.oldEmail} ,
			#{data.newEmail} ,
			#{data.token} ,
			#{data.checkCode} ,
			#{data.isUse} ,
			DATE_FORMAT(NOW(), '%Y%m%d%H%i%s') ,
			#{data.expiryDate} 
		) ON DUPLICATE KEY UPDATE 
		memberNo 	= #{data.memberNo},
		oldEmail 	= #{data.oldEmail},
		newEmail 	= #{data.newEmail},
		token 		= #{data.token},
		checkCode 	= #{data.checkCode},
		isUse 		= #{data.isUse},
		createDate  = createDate,
		expiryDate  = #{data.expiryDate}
	</insert>	
	
	
 	<!-- 使用會員編號與密碼確認該會員存在 -->
	<select id="getMemberSendChangeEmailByToken" parameterType="String" resultType="pojo.web.email.MemberSendChangeEmail">
		SELECT * , DATE_FORMAT(NOW(),'%Y%m%d%H%i%s') as dbTime FROM member_changeEmail WHERE token = #{token}
	</select>
	
	
	<!--  更新會員電子信箱 -->
	<update id="updateMemberEmail">
		UPDATE member_main SET email = #{newEmail} WHERE memberNo = #{memberNo}
	</update>	
	
	
    <!-- 檢查是否有重覆的手機號碼-->
	<select id="checkMemberDetailByCellphone" parameterType="Map" resultType="boolean">
		SELECT CASE WHEN EXISTS (SELECT 1 FROM member_detail de WHERE de.cellphone=#{cellphone})
		       THEN 1 ELSE 0 END isUsedCellphone
		FROM DUAL
	</select>
		
		
	<!-- 根據手機號碼查詢會員明細資料 -->
	<select id="findMemberDetailByMemberNo" parameterType="String" resultType="pojo.web.MemberDetail">
		SELECT * FROM member_detail WHERE memberNo = #{memberNo}
	</select>	
	
	
	<!--  更新會員使用者名稱 -->
	<update id="updateMemberUsername">
		UPDATE member_main SET username = #{newUsername} , modifyDate = DATE_FORMAT(NOW(), '%Y%m%d%H%i%s') WHERE memberNo = #{memberNo}
	</update>


	<!-- 新增會員明細或更新 -->
	<insert id="genMemberDetail" parameterType="pojo.web.MemberDetail">
		insert into
		member_detail
		(memberNo , nickname , birthday , cellphone , headerPicLink , createDate , modifyDate)
		values
		( 
			#{data.memberNo} , 
			#{data.nickname} ,
			#{data.birthday} ,
			#{data.cellphone} ,
			#{data.headerPicLink} ,
			DATE_FORMAT(NOW(), '%Y%m%d%H%i%s') ,
			DATE_FORMAT(NOW(), '%Y%m%d%H%i%s') 
		) ON DUPLICATE KEY UPDATE 
		memberNo 		= memberNo ,
		nickname 		= #{data.nickname} ,
		birthday 		= #{data.birthday} ,
		cellphone 		= #{data.cellphone} ,
		headerPicLink 	= #{data.headerPicLink} ,
		createDate  	= createDate ,
		modifyDate  	= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
	</insert>	
	
	
	<!-- 會員明細記錄檔 -->
	<insert id="genMemberDetailChangeLog" parameterType="pojo.web.MemberDetail">
		insert into
		member_detail_log(memberNo , nickname , birthday , cellphone , headerPicLink , createDate)
		values
		( 
			#{data.memberNo} , 
			#{data.nickname} ,
			#{data.birthday} ,
			#{data.cellphone} ,
			#{data.headerPicLink} ,
			DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		)
	</insert>
	
</mapper>